{"version":3,"file":"static/js/524.0104fe92.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","pages/Contacts/Contacts.js"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n// import { useSelector } from 'react-redux';\n\nexport const selectisLoadin = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectContacts = state => state.contacts.items;\nexport const selectFilter = state => state.filters.filterValue;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filterValue) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filterValue.toLowerCase())\n    );\n  }\n);\n\n// export const useContacts = () => useSelector(selectVisibleContacts);\n","import styled from \"styled-components\";\nimport { Form as FormikForm, ErrorMessage as FormikError, Field as FormikInput} from 'formik'\n\nexport const FormField = styled.label`\n    display: flex;\n    flex-direction: column;\n    gap: 4px;\n`\n\nexport const Form = styled(FormikForm)`\n    border: 1px solid black;\n    width: 500px;\n    padding: 10px;\n`;\n\nexport const Field = styled(FormikInput)`\n    font-size: 16px;\n    padding: 5px;\n    width: 100%;\n    border: 2px solid black;\n    border-radius: 5px;\n`;\n\n\n\nexport const ErrorMessage = styled(FormikError)`\n    color: red;\n`;\n\nexport const SubmitButton = styled.button`\n    display: block;\n    width: 40%;\n    font-size: 16px;\n    display: inline-block;\n    outline: 0;\n    border: 0;\n    cursor: pointer;\n    padding: 10px;\n    border-radius: 8px;\n    color: #fff;\n    height: 2.6em;\n    background-color: grey;\n`;","import React from 'react';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from '../../redux/contacts/operations';\nimport { selectContacts } from '../../redux/contacts/selectors';\nimport {\n  FormField,\n  Form,\n  Field,\n  ErrorMessage,\n  SubmitButton,\n} from './ContactForm.styled';\n\nconst ContactFormSchema = Yup.object().shape({\n  name: Yup.string()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      'Is not in correct format'\n    )\n    .required('Please, enter contact name'),\n  number: Yup.string()\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      'Is not in correct format'\n    )\n    .required('Please, enter phone number'),\n});\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSaveContact = (values, actions) => {\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === values.name.toLowerCase()\n      )\n    ) {\n      alert(`${values.name} is already in contacts`);\n    } else {\n      dispatch(addContact(values));\n      actions.resetForm();\n    }\n  };\n  return (\n    <Formik\n      initialValues={{ name: '', number: '' }}\n      validationSchema={ContactFormSchema}\n      onSubmit={handleSaveContact}\n    >\n      <Form>\n        <FormField>\n          Name\n          <Field type=\"text\" name=\"name\" />\n          <ErrorMessage name=\"name\" component=\"span\" />\n        </FormField>\n        <br></br>\n        <FormField htmlFor=\"\">\n          Number\n          <Field type=\"tel\" name=\"number\" />\n          <ErrorMessage name=\"number\" component=\"span\" />\n        </FormField>\n        <br></br>\n        <SubmitButton type=\"submit\">Add contact</SubmitButton>\n      </Form>\n    </Formik>\n  );\n};\n\n// ContactForm.propTypes = {\n//   onSubmit: PropTypes.func.isRequired,\n// };\n\n// export class ContactForm extends Component {\n//     state = {\n//         name: '',\n//         number: ''\n//     }\n//     // Метод для записування даних в стейт при введенны в input\n//     handleChange = (event) => {\n//         // Деструктиризація event.currentTarget\n//         const { name, value } = event.currentTarget\n//         // Перезаписуємо в стейт name i number\n//         this.setState({\n//             [name]: value\n//         })\n//     }\n\n//     // Метод сабміну форми.\n//     handleSubmit = event => {\n//         event.preventDefault();\n//         // this.props.onSubmit({ name: this.state.name, number: this.state.number, id: nanoid() })\n\n//         // Предаємо новий об'єкт контакту в App через функцію onSubmit (вона передана пропом onSubmit={this.addContact} )\n//         this.props.onSave({ ...this.state, id: nanoid() })\n//         this.resetForm()\n//     }\n\n//     resetForm = () => {\n//         this.setState({name: '', number: ''})\n//     }\n\n//     render() {\n//         return (\n//             <form onSubmit={this.handleSubmit}>\n//                 <label>\n//                     Name\n//                     <input\n//                         type=\"text\"\n//                         name=\"name\"\n//                         // pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//                         title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//                         requiredContactForm\n//                         value={this.state.name}\n//                         // При введенні даних в інпут викликаємо метод для записування в стейт\n//                         onChange={this.handleChange}\n//                     />\n//                 </label>\n//                 <br></br>\n//                 <label htmlFor=\"\">\n//                     Number\n//                     <input\n//                         type=\"tel\"\n//                         name=\"number\"\n//                         // pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//                         title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//                         required\n\n//                         value={this.state.number}\n//                         // При введенні даних в інпут викликаємо метод для записування в стейт\n//                         onChange={this.handleChange}\n//                     />\n//                 </label>\n//                 <br></br>\n//                 <button type=\"submit\">Add contact</button>\n//             </form>\n//         )\n//     }\n// }\n","import styled from \"styled-components\";\n\nexport const Section = styled.section`\n    font-size: 14px\n`\n\nexport const FilterLabel = styled.label`\n    display: flex;\n    flex-direction: column;\n    gap: 6px;\n`;\n\nexport const FilterInput = styled.input`\n    font-size: 16px;\n    padding: 5px;\n    width: 300px;\n    border-radius: 5px;\n    border: 2px solid black;\n`","import React from 'react';\nimport { setFilter } from 'redux/contacts/filterSlice';\nimport { useSelector } from 'react-redux';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { useDispatch } from 'react-redux';\nimport { Section, FilterInput, FilterLabel } from './Filter.styled';\n\nexport const Filter = ({ value, onChange }) => {\n  const dispatch = useDispatch();\n  const inputValue = useSelector(selectFilter);\n  const changeFilter = event => {\n    // console.log(event.currentTarget.value)\n    // console.log(event.currentTarget.name)\n    const filter = event.currentTarget.value;\n    dispatch(setFilter(filter));\n  };\n  return (\n    <Section>\n      <FilterLabel>\n        Find contacts by name\n        <FilterInput\n          type=\"text\"\n          name=\"filter\"\n          onChange={changeFilter}\n          value={inputValue}\n        />\n      </FilterLabel>\n    </Section>\n  );\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  list-style: none;\n  /* margin: 0 auto; */\n  width: 500px;\n  display: flex;\n  flex-direction: column;\n  gap: 13px;\n  padding: 0;\n`;\n\nexport const ContactItem = styled.div`\n  display: flex;\n  justify-content: space-between;\n  gap: 10px;\n`;\nexport const ContactValue = styled.span`\n  font-size: 24px;\n`;\n\nexport const DelButton = styled.button`\n  display: block;\n  width: 120px;\n  font-size: 16px;\n  display: inline-block;\n  outline: 0;\n  border: 0;\n  cursor: pointer;\n  padding: 6px;\n  border-radius: 8px;\n  color: #fff;\n  height: 30px;\n  background-color: grey;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from '../../redux/contacts/operations';\n// import { useSelector } from 'react-redux';\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\nimport {\n  List,\n  ContactItem,\n  DelButton,\n  ContactValue,\n} from './ContactList.styled';\n\n// const getVisibleContacts = (contacts, filter) => {\n//   const normalizedContacts = filter.toLowerCase();\n//   return contacts.filter(contact =>\n//     contact.name.toLowerCase().includes(normalizedContacts)\n//   );\n// };\n\nexport const ContactList = () => {\n  const visibleContacts = useSelector(selectVisibleContacts);\n  // const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n  // const visibleContacts = getVisibleContacts(contacts, filter);\n  return (\n    <section>\n      <List>\n        {visibleContacts.map(contact => {\n          return (\n            <li key={contact.id}>\n              <ContactItem>\n                <ContactValue>\n                  {contact.name}: {contact.number}\n                </ContactValue>\n\n                <DelButton onClick={() => dispatch(deleteContact(contact.id))}>\n                  Delete\n                </DelButton>\n              </ContactItem>\n            </li>\n          );\n        })}\n      </List>\n    </section>\n  );\n};\n","import { Layout } from 'components/Layout';\nimport { GlobalStyle } from '../../components/GlobalStyle';\nimport { ContactForm } from '../../components/ContactForm/ContactForm';\nimport { Filter } from '../../components/Filter/Filter';\n// import { Title, TitleSection } from '../../components/App.styled';\nimport { ContactList } from '../../components/ContactList/ContactList';\n\nexport default function Contacts() {\n  return (\n    <Layout>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n      <GlobalStyle />\n    </Layout>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","selectFilter","filters","filterValue","selectVisibleContacts","createSelector","filter","contact","name","toLowerCase","includes","FormField","styled","Form","FormikForm","Field","FormikInput","ErrorMessage","FormikError","SubmitButton","ContactFormSchema","Yup","shape","matches","required","number","ContactForm","dispatch","useDispatch","useSelector","initialValues","validationSchema","onSubmit","values","actions","find","alert","addContact","resetForm","type","component","htmlFor","Section","FilterLabel","FilterInput","Filter","value","onChange","inputValue","event","currentTarget","setFilter","List","ContactItem","ContactValue","DelButton","ContactList","visibleContacts","map","onClick","deleteContact","id","Contacts","Layout","GlobalStyle"],"sourceRoot":""}